// Vyper grammar for Lark
// Adapted from Lark repo. https://github.com/lark-parser/lark/blob/master/examples/python3.lark
// Adapted from: https://docs.python.org/3/reference/grammar.html
// Adapted by: Erez Shinan

// A module is a sequence of definitions and methods (and comments).
// NOTE: Start symbol for the grammar
module: ( COMMENT
        | import
        | units
        | struct
        | interface
        | constant
        | variable
        | method
        | event
        | _NEWLINE )*

// Import statements (Supports all styles of Python imports)
!dots: "."+
import_as_name: NAME ["as" NAME]
dotted_as_name: dotted_name ["as" NAME]
import_as_names: import_as_name ("," import_as_name)* [","]
dotted_as_names: dotted_as_name ("," dotted_as_name)*
dotted_name: NAME ("." NAME)*
import_name: "import" dotted_as_names
import_from: "from" (dots? dotted_name | dots) "import" ("*" | "(" import_as_names ")" | import_as_names)
import: import_name | import_from

// Unit definitions
unit: NAME ":" STRING
units: "units" ":" "{" ( unit "," )* unit? "}"
LABEL: "(" NAME ( "/" NAME )? ")"

// A decorator "wraps" a method, modifying it's context.
// NOTE: One or more can be applied (some combos might conflict)
DECORATOR_NAME: ( "private"
                | "public"
                | "payable"
                | "constant")
DECORATOR_WITH_ARGS_NAME: ( "nonreentrant" )
decorator: "@" DECORATOR_NAME _NEWLINE
         | "@" DECORATOR_WITH_ARGS_NAME [ "(" [arguments] ")" ] _NEWLINE
decorators: decorator+

// Constant definitions
constant: NAME ":" "constant" "(" memory_type ")" "=" test

// NOTE: NAME as type should refer to a custom type that is already defined
// NOTE: Temporary until decorators used
with_getter: NAME ":" "public" "(" storage_type ")"
variable: ( NAME ":" storage_type | with_getter )

// Methods take a list of zero or more typed parameters,
// and can return up to one parameter.
// NOTE: Parameters can have a default value,
//       which must be a constant or environment variable.
?parameter: NAME ":" abi_type ["=" test]
parameters: parameter ("," parameter?)*

method_type: "def" NAME "(" parameters? ")" ["->" abi_type]
method: [decorators] method_type ":" body

event_arg: NAME ":" abi_type
indexed_event_arg: NAME ":" "indexed" "(" abi_type ")"
// Events can have zero args
event: NAME ":" "event" "(" "{" (event_arg | indexed_event_arg)? ("," (event_arg | indexed_event_arg))* "}" ")"

?stmt: simple_stmt | compound_stmt
?simple_stmt: small_stmt (small_stmt)* _NEWLINE
?small_stmt: (expr_stmt | pass_stmt | flow_stmt | assert_stmt)
?expr_stmt: testlist_star_expr (assign | augassign (testlist)
         | ("=" (testlist_star_expr))*)
assign: ":" test ["=" test]
?testlist_star_expr: (test) ("," (test))* [","]
!augassign: ("+=" | "-=" | "*=" | "/=" | "**=" | "%=")
// For normal and annotated assignments, additional restrictions enforced by the interpreter
pass_stmt: "pass"
?flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [testlist]
raise_stmt: "raise" [test ["from" test]]
assert_stmt: "assert" test ["," test]

compound_stmt: if_stmt | for_stmt | struct | interface | method
if_stmt: "if" test ":" body ("elif" test ":" body)* ["else" ":" body]
for_stmt: "for" exprlist "in" testlist ":" body ["else" ":" body]

// // NB compile.c makes sure that the default except clause is last
// except_clause: "except" [test ["as" NAME]]
body: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: or_test ["if" or_test "else" test]
?test_nocond: or_test
?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> not
         | comparison
?comparison: expr (_comp_op expr)*
?expr: arith_expr
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _factor_op factor | power

!_factor_op: "+"|"-"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"/"|"%"
!_comp_op: "<"|">"|"=="|">="|"<="|"!="|"in"|"not" "in"|"is"|"is" "not"

?power: atom_expr ["**" factor]

?argument: test ["=" test]

arguments: argument ("," argument)*  // [","]
         | test comp_for

?atom_expr: atom_expr "(" [arguments] ")"    -> call
          | atom_expr "[" subscriptlist "]"  -> item
          | atom_expr "." NAME               -> attribute
          | atom

?atom: "(" [testlist_comp] ")" -> tuple
     | "[" [testlist_comp] "]"  -> list
     |"{" [dictmaker] "}" -> dict
     | NAME -> var
     | number_literal | string_literal+
     | "(" test ")"
     | "True"    -> const_true
     | "False"   -> const_false

?testlist_comp: (test) [("," (test))+ [","] | ","]
subscriptlist: subscript ("," subscript)*
subscript: test
exprlist: (expr) ("," (expr))* [","]
testlist: test ("," test)* [","]
dictmaker: ( ((test ":" test) ("," (test ":" test))* [","]) )

comp_iter: comp_for | comp_if
comp_for: "for" exprlist "in" or_test [comp_iter]
comp_if: "if" test_nocond [comp_iter]

// Types represented as 32-byte basic word
// NOTE: Only integers or decimals can be labeled
BASIC_TYPE: ( ["u"] "int" ("8"|"16"|"32"|"64"|"128"|"256") LABEL?
            | "address"
            | "bytes32"
            | "decimal" LABEL?
            | "bool" )

// Types that can be used in memory allocation
array: (BASIC_TYPE | CUSTOM_TYPE | array) "[" (DEC_NUMBER | NAME) "]"
bytes: "bytes" "[" (DEC_NUMBER | NAME) "]"
string: "string" "[" (DEC_NUMBER | NAME) "]"
memory_type: ( bytes
             | string
             | array // Goes after bytes and string so those get picked up first
             | BASIC_TYPE
             | CUSTOM_TYPE ) -> memory

tuple: "(" memory_type ( "," memory_type )* ")"
abi_type: ( memory_type | tuple )

// Structs can be composed of 1+ basic types or other custom_types
?struct_member: NAME ":" storage_type
struct: "struct" NAME ":" _NEWLINE _INDENT (struct_member _NEWLINE)+ _DEDENT

// Interfaces are composed of a series of method definitions, plus their mutability
mutability: ( "modifying" | "constant" )
interface_def: method_type ":" mutability
interface: "contract" NAME ":" _NEWLINE _INDENT (interface_def _NEWLINE)+ _DEDENT

// Maps take a hashable type as a key and can return a basic, memory,
// or a custom type (or another map recursively)
// NOTE: NAME as type should refer to a custom type that is already defined
map: "map" "(" ( BASIC_TYPE | string | bytes ) "," ( map | memory_type ) ")"

// Types that can be used in storage allocation
storage_type: ( map | memory_type ) -> storage

// not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME


number_literal: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
string_literal: STRING | LONG_STRING
// Tokens

NAME: /[a-zA-Z_]\w*/
CUSTOM_TYPE: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT
